# -*- coding: utf-8 -*-
"""Text to Speech with fine Tuneing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zKQybYzmGeCz5Ap4X_Tzd8SRDjZZGucR
"""

!pip install deepgram-sdk==2.12.0
!pip install pytubefix

import os
import asyncio
from deepgram import Deepgram
from pytubefix import YouTube
from pytubefix.cli import on_progress
import requests  # For making HTTP requests to Eleven Labs API
from IPython.display import Audio, display  # For playing audio in Colab

# Set your Deepgram and Eleven Labs API keys
DEEPGRAM_API_KEY = os.getenv("DEEPGRAM_API_KEY", "3e7f5a5ba67ebd23f054e5e848d69a0e7959a5a0")  # Replace with your Deepgram API key
ELEVEN_LABS_API_KEY = os.getenv("ELEVEN_LABS_API_KEY", "sk_08281edfbd72481296af8768e85bbd291d45d29e5dbfca05")  # Replace with your Eleven Labs API key

# YouTube video URL
url = "https://www.youtube.com/watch?v=judDTy5vN20"
# Download the audio from the YouTube video
yt = YouTube(url, on_progress_callback=on_progress)
print(f"Downloading audio from video: {yt.title}")

# Filter only the audio stream
video_stream = yt.streams.filter(only_audio=True).first()
audio_file = 'audio.mp4'
video_stream.download(filename=audio_file)
print(f"Audio downloaded and saved as {audio_file}")

# Path to the extracted audio file
AUDIO_FILE_PATH = 'audio.mp4'

# Initialize the Deepgram client
dg_client = Deepgram(DEEPGRAM_API_KEY)

# Function to transcribe the audio using Deepgram
async def transcribe_audio():
    try:
        # Open the audio file in binary mode
        with open(AUDIO_FILE_PATH, 'rb') as audio_file:
            source = {
                'buffer': audio_file,
                'mimetype': 'audio/mp4'  # Specify the correct mimetype
            }

            # Make the transcription request
            response = await dg_client.transcription.prerecorded(
                source,
                {
                    'punctuate': True,  # Adds punctuation to the transcription
                    'language': 'en',   # Specifies the language
                }
            )

            # Check if the response contains the expected data
            if response and 'results' in response:
                transcript = response['results']['channels'][0]['alternatives'][0]['transcript']
                print("Transcription successful!")
                print(transcript)
                return transcript
            else:
                print("Transcription failed or no results found.")
                return None

    except Exception as e:
        print(f"Error transcribing audio: {e}")

# Function to convert text to speech using Eleven Labs API
def generate_speech_from_text(text, voice="pNInz6obpgDQGcFmaJgB"):
    try:
        url = "https://api.elevenlabs.io/v1/text-to-speech"  # The base URL for Eleven Labs API

        headers = {
            "Accept": "audio/mpeg",
            "Content-Type": "application/json",
            "xi-api-key": ELEVEN_LABS_API_KEY
        }

        data = {
            "text": text,
            "voice_settings": {
                "stability": 0.2,  # Adjusts how calm and stable the voice is. Lower is more expressive.
                "similarity_boost": 0.85  # How similar the voice is to the original speaker. Higher is more consistent, lower is more dynamic.
            },
            "model_id": "eleven_monolingual_v1",
            "language_id": "en"
        }

        # Send the request to Eleven Labs API
        response = requests.post(f"{url}/{voice}", json=data, headers=headers)

        if response.status_code == 200:
            # Save the audio file as output.mp3
            with open('output.mp3', 'wb') as audio_file:
                audio_file.write(response.content)
            print("Audio generated and saved as output.mp3")
        else:
            print(f"Failed to generate audio: {response.status_code} - {response.text}")
            raise FileNotFoundError(f"Eleven Labs API request failed, audio file not created. Status code: {response.status_code}, Response: {response.text}")

    except Exception as e:
        print(f"Error generating speech: {e}")

# Function to play the audio file in Google Colab
def play_audio_in_colab(file_path):
    display(Audio(filename=file_path, rate=44100, autoplay=True))

# Main function to handle transcription, TTS generation, and audio playback
def main():
    try:
        import IPython
        # Get the current running event loop in the Jupyter environment
        loop = asyncio.get_event_loop()

        # If in a Jupyter environment, integrate with its event loop
        if IPython.get_ipython() is not None:
            import nest_asyncio
            nest_asyncio.apply()  # This line integrates asyncio with the Jupyter event loop
            transcript = loop.run_until_complete(transcribe_audio())
        else:
            transcript = asyncio.run(transcribe_audio())

        # If transcription was successful, generate the speech
        if transcript:
            generate_speech_from_text(transcript, voice="pNInz6obpgDQGcFmaJgB")  # Specify the desired voice from Eleven Labs

            # Play the generated audio in Colab
            play_audio_in_colab('output.mp3')

    except ImportError:
        # If not in IPython, use asyncio.run
        transcript = asyncio.run(transcribe_audio())

        # If transcription was successful, generate the speech
        if transcript:
            generate_speech_from_text(transcript, voice="pNInz6obpgDQGcFmaJgB")
            play_audio_in_colab('output.mp3')

# Call the main function directly
if __name__ == "__main__":
    main()